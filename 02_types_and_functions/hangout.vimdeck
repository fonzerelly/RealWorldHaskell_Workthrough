#Types and Functions

Typen definieren welche Bits & Bytes wie verwendet werden sollen.

## Strong Types

- erlaubt keine anders artigen Variablen Typen (String statt Int -> Compilerfehler)
- keine automatische konvertierung von Datentype (Int /= Float)
- Binäre Datenklumpen können nicht auf den passenden Typ gacastet werden
(Wie realisiert man dann sowas wie Serialisierung von Datenstrukturen? Python: pickeling, Java: marshelling)


##Static Types

- Es ist immer bekannt, welcher Wert welchen Datentyp hat
- Haskells Kombination aus starken und statischen Typen erlauben ähnliche Praktiken
  wie Duck Typing
- Triviale Fehler können nicht zur Laufzeit auftauchen...
- Puzzelanalogy: In Haskell alle Puzzelteile andere Formen und passen doch zusammen
  während in dynamischen Programmiersprachen alle Teile 'quadratisch' sind und man
  immer nochmal extra prüfen muss ob ein korrektes Gesamtbild herauskommt


##Type Inference

- Haskell kann im Falle von fehlenden Typinformationen selbst erkennen welche Art von
  Typ vorliegt.
(Ist das nicht eher das die Fähigkeit, die DuckTyping erlaubt? Ähnlich wie Generics?)
- Man muss dem Compiler nicht alle Typen "mundgerecht" vorlegen


##Some Common Basic Types

- Char
- Bool
- Int (Fix size)
  Warum wird nicht erkannt, das 99999999999999999999999999999999999999999999
  kein Fixed Size Integer ist? Hier kann es zum merkwürdigen Überlauffehlern
  kommen! AUFPASSEN!!!
- Integer (Infinit size)
- Double
- Float (langsamer als Double)


##Function Application

Es werden Klammern nur für verschachtelte Funktionsaufrufe benötigt,
da Funktionen einen höheren Prezedenswert als operatoren haben.


##Listen und Tupel
##(Polymorphismus)

Listen erwarten keinen konkreten Datentyp
```haskell
ghci> :type []
[] :: [a]
```
'a' ist eine Typenvariable und steht stellvertretend für alle denkbaren
Datentypen, die in ein er Liste abgelegt werden können. Eine Liste ist veränderlich,
aber in einer Liste kann nur ein Datentyp vorkommen.

Tupel erwarten auch keinen konkreten Datentyp und können obendrein verschiedene
Datentypen aufnehmen:
```haskell
ghci> (1, 'a')
(1,'a')
ghci> :type it
it :: (Integer, Char)
```
Tupel sind unveränderlich. Ihre Kombinationsmöglichkeit von Datentypen erlauben das
zusammenlegen zusammengehöriger Daten. Beispiel:
```haskell
ghci> let books = [("Real World Haskell", 2010), ("Structure and Interpreatation of Computer Programs', 1984)]
ghci> :type books
books :: [([Char], Integer)]
```

Parameterized type:
add :: Num -> Num

Polymorphic type:
last :: [a] -> a

subtype polymorphism vs parametric polymorphism vs coercion polymorphism
Ableitung            vs Generics                vs Casting



##What are the types of following expressions?

```haskell
ghci> :type False
False :: Bool

ghci> :type (["foo", "bar"], 'a')
(["foo", "bar"], 'a') :: ([[Char]], Char)

ghci> :type [(True, []), (False, [['a']])]
[(True, []), (False, [['a']])] :: [(Bool, [[Char]])]
```


##Purity
##(Seiteneffektfrei)
- Eine Funktion in Haskell ist hat per default keine Seiteneffekte.
  Das drückt sich auch in ihrem Typus aus.
- Sollte sie doch in irgend einer Form das Gesamtsystem beeinflussen,
  oder vom Status des Gesamtsystems abhängen, dann muss sich das in seinem
  Typus wider spiegeln.

Beispiel:
```haskell
ghci> :type readFile
readFile :: IO String
```
- Wenn eine Variable mal gesetzt ist, kann sie nicht mehr verändert werden.

Konsequenz:
- Aus der Typensignatur alleine lässt sich abgrenzen welche Auswirkungen sie hat und welche nicht
- Seiteneffektfreie Funktionen sind in sich schon modular abgegrenzt
- Die strikte Trennung von Seiteneffektfreiem und -behafteten Code macht die Weiterentwicklung einfacher
- Risiken die sich durch Abhängigkeiten zur Außenwelt ergeben, werden vermindert


##Lazy evaluation
page 32-36
Eine Funktion wird zu einem 'thunk' ausgewertet, also einer Funktion der teilweise
oder vollständig parameter zur Verfügung stehen. Diese Funktion wird aber erst ausgewertet
wenn ihr Wert tatsächlich benötigt wird.
(nonstrict evaluation)

Dadurch erklärt sich auch, warum der aus druck 1 + 3 dem Typen einer Funktion entspricht
und nicht einem Integer
```haskell
ghci> :type 1 + 3
1 + 3 :: Num a => a
```

Zum Vergelich hier mal ein javascript snippet, dass die gleiche bedeutung hat
wie haskells 1 + 3
```javascript
function() {
    return 1 + 3;
}
```
Es handelt sich also lediglich um eine Funktion, die einen Zahlenwert zurückliefern
wird. Welcher Wert das genau sein wird, steht erst fest wenn die Funktion ausgeführt
wird.


#Based on its type signature, what can last :: [a] -> a do and what not?
possible:
- It can summerize a list to a value of the same type
- It can extract one of the elements of a list
- It can ignore the list and return a random value of the same type?!?

impossible:
- It can not covert a list of type a to another type
- It can not return a modified list


#lastButOne
```haskell
lastButOne xs = head(drop(length(xs) -2) xs)
```

```haskell
ghci> :load lastButOne.hs
[1 of 1] Compiling Main             ( lastButOne.hs, interpreted )
Ok, modules loaded: Main.
ghci> lastButOne [1,2,3,4,5]
4
ghci> lastButOne [1,2]
1
ghci> lastButOne [1]
1
ghci> lastButOne []
*** Exception: Prelude.head: empty list
ghci>
```


